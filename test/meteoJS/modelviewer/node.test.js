const assert = require("assert");
import Resource
  from '../../../src/meteoJS/modelviewer/Resource.js';
import Variable from '../../../src/meteoJS/modelviewer/Variable.js';
import VariableCollection
  from '../../../src/meteoJS/modelviewer/VariableCollection.js';
import Node from '../../../src/meteoJS/modelviewer/Node.js';
import { Node as NodeClass } from '../../../src/meteoJS/modelviewer/Node.js';

describe('Default Node, import via default', () => {
  describe('children', () => {
    it('simple append', () => {
      let appendCounter = 0;
      let node1 = new Node(new VariableCollection({ id: '1' }));
      assert.equal(node1.variableCollection.node, node1, 'VariableCollectoin\'s Node');
      node1.on('append:child', child => {
        appendCounter++;
      });
      let node2 = new Node(new VariableCollection({ id: '2' }));
      assert.equal(node2.variableCollection.node, node2, 'VariableCollectoin\'s Node');
      let node3 = new Node(new VariableCollection({ id: '3' }));
      assert.equal(node3.variableCollection.node, node3, 'VariableCollectoin\'s Node');
      node1.appendChild(node2).appendChild(node3);
      assert.equal(node1.children.length, 2, 'node1 has 2 children');
      assert.equal(appendCounter, 2, 'two append events');
      assert.ok(node1.children[0] === node2, 'first child is node2');
      assert.ok(node1.children[1] === node3, 'last child is node3');
      assert.equal(node2.parents.length, 1, 'node2 has one parent');
      assert.ok(node2.parents[0] === node1, 'node2\'s parent is node1');
      assert.equal(node3.parents.length, 1, 'node3 has one parent');
      assert.ok(node3.parents[0] === node1, 'node3\'s parent is node1');
    });
    it('multi append', () => {
      let appendCounter = 0;
      let node1 = new Node(new VariableCollection({ id: '1' }));
      node1.on('append:child', child => {
        appendCounter++;
      });
      let node2 = new Node(new VariableCollection({ id: '2' }));
      let node3 = new Node(new VariableCollection({ id: '3' }));
      node1.appendChild(node2, node3);
      assert.equal(node1.children.length, 2, 'node1 has 2 children');
      assert.equal(appendCounter, 2, 'two append events');
      assert.ok(node1.children[0] === node2, 'first child is node2');
      assert.ok(node1.children[1] === node3, 'last child is node3');
      assert.equal(node2.parents.length, 1, 'node2 has one parent');
      assert.ok(node2.parents[0] === node1, 'node2\'s parent is node1');
      assert.equal(node3.parents.length, 1, 'node3 has one parent');
      assert.ok(node3.parents[0] === node1, 'node3\'s parent is node1');
    });
  });
  it('parents', () => {
    let node1 = new Node(new VariableCollection({ id: '1' }));
    let node2 = new Node(new VariableCollection({ id: '2' }));
    let node3 = new Node(new VariableCollection({ id: '3' }));
    node1._addParent(node2);
    assert.equal(node1.parents.length, 1, 'node1 has one parent');
    node1._addParent(node3);
    assert.equal(node1.parents.length, 2, 'node1 has two parents');
    assert.ok(node1.parents[0] === node2, 'first parent is node2');
    assert.ok(node1.parents[1] === node3, 'last parent is node3');
  });
  it ('empty resource', () => {
    let r = new Resource();
    let node = new Node(new VariableCollection({ id: 'test' }));
    assert.equal(node.append(r), 0, 'append count');
    assert.equal(node.resources.length, 0, 'no resources');
  });
  it('resources', () => {
    let vc = new VariableCollection({ id: 'testA' });
    let v1 = new Variable({ id: 'Test1' });
    let v2 = new Variable({ id: 'Test2' });
    let v3 = new Variable({ id: 'Test3' });
    vc.append(v1, v2, v3);
    let vcB = new VariableCollection({ id: 'testB' });
    let v4 = new Variable({ id: 'Test4' });
    let v5 = new Variable({ id: 'Test5' });
    vcB.append(v4, v5);
    let r1 = new Resource({ variables: [v1] });
    let r2 = new Resource({ variables: [v2] });
    let r3 = new Resource({ variables: [v3] });
    let r4 = new Resource({ variables: [v1, v4] });
    let r5 = new Resource({ variables: [v5] });
    assert.equal(r1.getVariableByVariableCollection(vc).id, 'Test1', 'Variable r1');
    assert.equal(r2.getVariableByVariableCollection(vc).id, 'Test2', 'Variable r2');
    assert.equal(r3.getVariableByVariableCollection(vc).id, 'Test3', 'Variable r3');
    assert.equal(r4.getVariableByVariableCollection(vc).id, 'Test1', 'Variable r4');
    assert.equal(r5.getVariableByVariableCollection(vc).id, undefined, 'Variable r5');
    let node = new Node(vc);
    node.append(r1);
    node.append(r2);
    assert.equal(node.resources.length, 2, '2 resources');
    assert.equal(node._resources.size, 1, 'internal: 1 variableCollections in _resources');
    for (let s of node._resources.values())
      assert.equal(s.size, 2, 'internal: 2 Resources in the Set');
    node.append(r3, r4, r5);
    assert.equal(node.resources.length, 4, '4 resources');
    assert.equal(node._resources.size, 1, 'internal: 1 variableCollections in _resources');
    let _resourcesIterator = node._resources.entries();
    let firstSet = _resourcesIterator.next().value;
    assert.equal(firstSet[0].variableCollection.id, 'testA', 'internal: First collection is A in _resources');
    assert.equal(firstSet[1].size, 3, 'internal: 3 Variables for testA in _resources');
  });
  describe('remove', () => {
    it('single node', () => {
      const variableCollection = new VariableCollection({ id: 'test' });
      const v1 = new Variable({ id: 'Test1' });
      const v2 = new Variable({ id: 'Test2' });
      const v3 = new Variable({ id: 'Test3' });
      variableCollection.append(v1, v2, v3);
      const r1 = new Resource({ variables: [v1] });
      const r2 = new Resource({ variables: [v2] });
      const r3 = new Resource({ variables: [v3] });
      const r4 = new Resource({ variables: [v1, v2] });
      const r5 = new Resource({ variables: [v1, v2, v3] });
      const r6 = new Resource({ variables: [v1] });
      const node = new Node(variableCollection);
      assert.equal(node.append(r1, r2, r3, r4, r5, r6), 6, '6 appended resources');
      assert.equal(node.resources.length, 6, '6 resources');
      assert.equal(node._resources.size, 1, 'internal: 1 variableCollections in _resources');
      assert.equal(node._resources.values().next().value.size, 3, 'internal: 3 Variables with resources in _resources');
      assert.equal(node.remove(r2), 1, '1 removed resources');
      assert.equal(node.resources.length, 5, '5 resources');
      assert.equal(node._resources.size, 1, 'internal: 1 variableCollections in _resources');
      assert.equal(node._resources.values().next().value.size, 3, 'internal: 3 Variables with resources in _resources');
      assert.equal(node.remove(r3, r4), 2, '2 removed resources');
      assert.equal(node.resources.length, 3, '5 resources');
      assert.equal(node._resources.size, 1, 'internal: 1 variableCollections in _resources');
      assert.equal(node._resources.values().next().value.size, 2, 'internal: 2 Variables with resources in _resources');
      assert.equal(node.remove(r1, r6), 2, '2 removed resources');
      assert.equal(node.resources.length, 1, '1 resources');
      assert.equal(node._resources.size, 1, 'internal: 1 variableCollections in _resources');
      assert.equal(node._resources.values().next().value.size, 1, 'internal: 1 Variables with resources in _resources');
      assert.equal(node.remove(r1, r6), 0, '0 removed resources');
      assert.equal(node.resources.length, 1, '1 resources');
      assert.equal(node._resources.size, 1, 'internal: 1 variableCollections in _resources');
      assert.equal(node._resources.values().next().value.size, 1, 'internal: 1 Variables with resources in _resources');
      assert.equal(node.remove(r5), 1, '1 removed resources');
      assert.equal(node.resources.length, 0, '0 resources');
      assert.equal(node._resources.size, 0, 'internal: 0 variableCollections in _resources');
    });
    it('simple node tree', () => {
      const topCollection = new VariableCollection({ id: 'top-collection' });
      const topVar1 = new Variable({ id: 'top-var1' });
      const topVar2 = new Variable({ id: 'top-var2' });
      topCollection.append(topVar1, topVar2);
      const topNode = new Node(topCollection);
      const middleCollection = new VariableCollection({ id: 'middle-collection' });
      const middleVar1 = new Variable({ id: 'middle-var1' });
      const middleVar2 = new Variable({ id: 'middle-var2' });
      middleCollection.append(middleVar1, middleVar2);
      const middleNode = new Node(middleCollection);
      const bottomCollection = new VariableCollection({ id: 'bottom-collection' });
      const bottomVar1 = new Variable({ id: 'bottom-var1' });
      const bottomVar2 = new Variable({ id: 'bottom-var2' });
      bottomCollection.append(bottomVar1, bottomVar2);
      const bottomNode = new Node(bottomCollection);
      topNode.appendChild(middleNode.appendChild(bottomNode));
      assert.equal(topNode.resources.length, 0, '0 topNode-resources');
      assert.equal(middleNode.resources.length, 0, '0 middleNode-resources');
      assert.equal(bottomNode.resources.length, 0, '0 bottomNode-resources');
      const r1 = new Resource({ variables: [topVar1] });
      const r2 = new Resource({ variables: [topVar2] });
      const r3 = new Resource({ variables: [topVar1, middleVar1, bottomVar1] });
      const r4 = new Resource({ variables: [topVar1, middleVar1, bottomVar2] });
      const r5 = new Resource({ variables: [topVar1, middleVar2, bottomVar1] });
      const r6 = new Resource({ variables: [topVar1, middleVar2, bottomVar2] });
      const r7 = new Resource({ variables: [topVar2, middleVar1, bottomVar1] });
      const r8 = new Resource({ variables: [topVar2, middleVar2, bottomVar1] });
      assert.equal(topNode.append(r1, r2), 2, '2 appended resources to topNode');
      assert.equal(bottomNode.append(r3, r4, r5, r6, r7, r8), 6, '6 appended resources to topNode');
      assert.equal(topNode.resources.length, 2, '2 topNode-resources');
      assert.equal(middleNode.resources.length, 0, '0 middleNode-resources');
      assert.equal(bottomNode.resources.length, 6, '6 bottomNode-resources');
      assert.equal(topNode._resources.size, 1, 'internal: 1 variableCollections in _resources');
      assert.equal(bottomNode._resources.size, 4, 'internal: 4 variableCollections in _resources');
      assert.equal(bottomNode.remove(r3), 1, '1 removed resources');
      assert.equal(topNode.resources.length, 2, '2 topNode-resources');
      assert.equal(middleNode.resources.length, 0, '0 middleNode-resources');
      assert.equal(bottomNode.resources.length, 5, '5 bottomNode-resources');
      assert.equal(topNode._resources.size, 1, 'internal: 1 variableCollections in _resources');
      assert.equal(bottomNode._resources.size, 4, 'internal: 4 variableCollections in _resources');
      assert.equal(bottomNode.remove(r5, r6), 2, '2 removed resources');
      assert.equal(topNode.resources.length, 2, '2 topNode-resources');
      assert.equal(middleNode.resources.length, 0, '0 middleNode-resources');
      assert.equal(bottomNode.resources.length, 3, '3 bottomNode-resources');
      assert.equal(topNode._resources.size, 1, 'internal: 1 variableCollections in _resources');
      assert.equal(bottomNode._resources.size, 3, 'internal: 3 variableCollections in _resources');
      assert.equal(bottomNode.remove(r4, r7, r8), 3, '3 removed resources');
      assert.equal(topNode.resources.length, 2, '2 topNode-resources');
      assert.equal(middleNode.resources.length, 0, '0 middleNode-resources');
      assert.equal(bottomNode.resources.length, 0, '0 bottomNode-resources');
      assert.equal(topNode._resources.size, 1, 'internal: 1 variableCollections in _resources');
      assert.equal(bottomNode._resources.size, 0, 'internal: 0 variableCollections in _resources');
      assert.equal(topNode.remove(r2), 1, '1 removed resources');
      assert.equal(topNode.resources.length, 1, '1 topNode-resources');
      assert.equal(middleNode.resources.length, 0, '0 middleNode-resources');
      assert.equal(bottomNode.resources.length, 0, '0 bottomNode-resources');
      assert.equal(topNode._resources.size, 1, 'internal: 1 variableCollections in _resources');
      assert.equal(bottomNode._resources.size, 0, 'internal: 0 variableCollections in _resources');
    });
  });
  describe('hasResourcesByVariables', () => {
    it('single node', () => {
      let vc = new VariableCollection({ id: 'test' });
      let node = new Node(vc);
      let vc1 = new VariableCollection({ id: 'testA' });
      let node1 = new Node(vc1);
      let v1 = new Variable({ id: 'Test1' });
      let v2 = new Variable({ id: 'Test2' });
      let v3 = new Variable({ id: 'Test3' });
      let v4 = new Variable({ id: 'Test4' });
      vc1.append(v4);
      let v5 = new Variable({ id: 'Test5' });
      vc.append(v1, v2, v3, v5);
      let r1 = new Resource({ variables: [v1] });
      let r2 = new Resource({ variables: [v2] });
      let r3 = new Resource({ variables: [v3] });
      let r4 = new Resource({ variables: [v1, v4] });
      let r5 = new Resource({ variables: [v5] });
      assert.equal(node.append(r1, r2, r3, r4, r5), 5, '5 appended resources');
      assert.equal(node.resources.length, 5, '5 resources');
      assert.equal(node.hasResourcesByVariables(v1), true, 'hasResourcesByVariables(v1)');
      assert.equal(node.hasResourcesByVariables(false, v1), true, 'hasResourcesByVariables(false, v1)');
      assert.equal(node.hasResourcesByVariables(true, v1), true, 'hasResourcesByVariables(true, v1)');
      assert.equal(node.hasResourcesByVariables(v2), true, 'hasResourcesByVariables(v2)');
      assert.equal(node.hasResourcesByVariables(false, v2), true, 'hasResourcesByVariables(false, v2)');
      assert.equal(node.hasResourcesByVariables(true, v2), true, 'hasResourcesByVariables(true, v2)');
      assert.equal(node.hasResourcesByVariables(v3), true, 'hasResourcesByVariables(v3)');
      assert.equal(node.hasResourcesByVariables(false, v3), true, 'hasResourcesByVariables(false, v3)');
      assert.equal(node.hasResourcesByVariables(true, v3), true, 'hasResourcesByVariables(true, v3)');
      assert.equal(node.hasResourcesByVariables(v4), false, 'hasResourcesByVariables(v4)');
      assert.equal(node.hasResourcesByVariables(false, v4), false, 'hasResourcesByVariables(false, v4)');
      assert.equal(node.hasResourcesByVariables(true, v4), false, 'hasResourcesByVariables(true, v4)');
      assert.equal(node.hasResourcesByVariables(v5), true, 'hasResourcesByVariables(v5)');
      assert.equal(node.hasResourcesByVariables(false, v5), true, 'hasResourcesByVariables(false, v5)');
      assert.equal(node.hasResourcesByVariables(true, v5), true, 'hasResourcesByVariables(true, v5)');
      assert.equal(node.hasResourcesByVariables(v1, v2), false, 'hasResourcesByVariables(v1, v2)');
      assert.equal(node.hasResourcesByVariables(false, v1, v2), false, 'hasResourcesByVariables(false, v1, v2)');
      assert.equal(node.hasResourcesByVariables(true, v1, v2), false, 'hasResourcesByVariables(true, v1, v2)');
      assert.equal(node.hasResourcesByVariables(v1, v4), false, 'hasResourcesByVariables(v1, v4)');
      assert.equal(node.hasResourcesByVariables(false, v1, v4), false, 'hasResourcesByVariables(false, v1, v4)');
      assert.equal(node.hasResourcesByVariables(true, v1, v4), false, 'hasResourcesByVariables(true, v1, v4)');
      assert.equal(node.hasResourcesByVariables(v1,v2,v3,v4,v5), false, 'hasResourcesByVariables(v1,v2,v3,v4,v5)');
      assert.equal(node.hasResourcesByVariables(false, v1,v2,v3,v4,v5), false, 'hasResourcesByVariables(false, v1,v2,v3,v4,v5)');
      assert.equal(node.hasResourcesByVariables(true, v1,v2,v3,v4,v5), false, 'hasResourcesByVariables(true, v1,v2,v3,v4,v5)');
    });
    it('simple node tree', () => {
      let vc = new VariableCollection({ id: 'test' });
      let node = new Node(vc);
      let vcChild = new VariableCollection({ id: 'test-child' });
      let nodeChild = new Node(vcChild);
      node.appendChild(nodeChild);
      let v1 = new Variable({ id: 'Test1' });
      let v2 = new Variable({ id: 'Test2' });
      let v3 = new Variable({ id: 'Test3' });
      let v4 = new Variable({ id: 'Test4' });
      vcChild.append(v4);
      let v5 = new Variable({ id: 'Test5' });
      vc.append(v1, v2, v3, v5);
      let r1 = new Resource({ variables: [v1] });
      let r2 = new Resource({ variables: [v2] });
      let r3 = new Resource({ variables: [v3] });
      let r4 = new Resource({ variables: [v1, v4] });
      let r5 = new Resource({ variables: [v5] });
      assert.equal(node.append(r1, r2, r3, r5), 4, '5 appended resources');
      assert.equal(nodeChild.append(r4), 1, '1 appended resource');
      assert.equal(node.resources.length, 4, 'node: 5 resources');
      assert.equal(nodeChild.resources.length, 1, 'nodeChild: 5 resources');
      assert.equal(node.hasResourcesByVariables(v1), true, 'hasResourcesByVariables(v1)');
      assert.equal(node.hasResourcesByVariables(false, v1), true, 'hasResourcesByVariables(false, v1)');
      assert.equal(node.hasResourcesByVariables(true, v1), true, 'hasResourcesByVariables(true, v1)');
      assert.equal(nodeChild.hasResourcesByVariables(v1), true, 'nodeChild.hasResourcesByVariables(v1)');
      assert.equal(nodeChild.hasResourcesByVariables(false, v1), true, 'nodeChild.hasResourcesByVariables(false, v1)');
      assert.equal(nodeChild.hasResourcesByVariables(true, v1), false, 'nodeChild.hasResourcesByVariables(true, v1)');
      assert.equal(node.hasResourcesByVariables(v2), true, 'hasResourcesByVariables(v2)');
      assert.equal(node.hasResourcesByVariables(false, v2), true, 'hasResourcesByVariables(false, v2)');
      assert.equal(node.hasResourcesByVariables(true, v2), true, 'hasResourcesByVariables(true, v2)');
      assert.equal(nodeChild.hasResourcesByVariables(v2), false, 'nodeChild.hasResourcesByVariables(v2)');
      assert.equal(nodeChild.hasResourcesByVariables(false, v2), false, 'nodeChild.hasResourcesByVariables(false, v2)');
      assert.equal(nodeChild.hasResourcesByVariables(true, v2), false, 'nodeChild.hasResourcesByVariables(true, v2)');
      assert.equal(node.hasResourcesByVariables(v3), true, 'hasResourcesByVariables(v3)');
      assert.equal(node.hasResourcesByVariables(false, v3), true, 'hasResourcesByVariables(false, v3)');
      assert.equal(node.hasResourcesByVariables(true, v3), true, 'hasResourcesByVariables(true, v3)');
      assert.equal(node.hasResourcesByVariables(v4), false, 'hasResourcesByVariables(v4)');
      assert.equal(node.hasResourcesByVariables(false, v4), false, 'hasResourcesByVariables(false, v4)');
      assert.equal(node.hasResourcesByVariables(true, v4), false, 'hasResourcesByVariables(true, v4)');
      assert.equal(nodeChild.hasResourcesByVariables(v4), true, 'nodeChild.hasResourcesByVariables(v4)');
      assert.equal(nodeChild.hasResourcesByVariables(false, v4), true, 'nodeChild.hasResourcesByVariables(false, v4)');
      assert.equal(nodeChild.hasResourcesByVariables(true, v4), false, 'nodeChild.hasResourcesByVariables(true, v4)');
      assert.equal(node.hasResourcesByVariables(v5), true, 'hasResourcesByVariables(v5)');
      assert.equal(node.hasResourcesByVariables(false, v5), true, 'hasResourcesByVariables(false, v5)');
      assert.equal(node.hasResourcesByVariables(true, v5), true, 'hasResourcesByVariables(true, v5)');
      assert.equal(node.hasResourcesByVariables(v1, v2), false, 'hasResourcesByVariables(v1, v2)');
      assert.equal(node.hasResourcesByVariables(false, v1, v2), false, 'hasResourcesByVariables(false, v1, v2)');
      assert.equal(node.hasResourcesByVariables(true, v1, v2), false, 'hasResourcesByVariables(true, v1, v2)');
      assert.equal(nodeChild.hasResourcesByVariables(v1, v2), false, 'nodeChild.hasResourcesByVariables(v1, v2)');
      assert.equal(nodeChild.hasResourcesByVariables(false, v1, v2), false, 'nodeChild.hasResourcesByVariables(false, v1, v2)');
      assert.equal(nodeChild.hasResourcesByVariables(true, v1, v2), false, 'nodeChild.hasResourcesByVariables(true, v1, v2)');
      assert.equal(node.hasResourcesByVariables(v1, v4), false, 'hasResourcesByVariables(v1, v4)');
      assert.equal(node.hasResourcesByVariables(false, v1, v4), false, 'hasResourcesByVariables(false, v1, v4)');
      assert.equal(node.hasResourcesByVariables(true, v1, v4), false, 'hasResourcesByVariables(true, v1, v4)');
      assert.equal(nodeChild.hasResourcesByVariables(v1, v4), true, 'nodeChild.hasResourcesByVariables(v1, v4)');
      assert.equal(nodeChild.hasResourcesByVariables(false, v1, v4), true, 'nodeChild.hasResourcesByVariables(false, v1, v4)');
      assert.equal(nodeChild.hasResourcesByVariables(true, v1, v4), true, 'nodeChild.hasResourcesByVariables(true, v1, v4)');
      assert.equal(node.hasResourcesByVariables(v1,v2,v3,v4,v5), false, 'hasResourcesByVariables(v1,v2,v3,v4,v5)');
      assert.equal(node.hasResourcesByVariables(false, v1,v2,v3,v4,v5), false, 'hasResourcesByVariables(false, v1,v2,v3,v4,v5)');
      assert.equal(node.hasResourcesByVariables(true, v1,v2,v3,v4,v5), false, 'hasResourcesByVariables(true, v1,v2,v3,v4,v5)');
    });
  });
});
describe('Node class, import via name', () => {
  it('constructor test', () => {
    let vc = new VariableCollection();
    let node = new NodeClass(vc);
    assert.ok(node.variableCollection === vc);
  });
});